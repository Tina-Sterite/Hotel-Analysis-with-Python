1st: create database

BookingAnalysis

To output the data generated by the Snowfakery YAML recipe directly to a PostgreSQL database, you would use the --output-format flag with the db format and specify the necessary PostgreSQL connection details.

Hereâ€™s an example command:

Working command:
snowfakery new_hotel_bookings.yaml --dburl postgresql://postgres:sup3Rus3R@localhost:5432/BookingAnalysis

snowfakery lodging_options.yml --output-format db --db-url postgresql://username:password@hostname:port/dbname
snowfakery lodging_options.yml --output-format db --db-url postgresql://myuser:mypassword@localhost:5432/mydatabase

Important Notes:
If your password contains special characters (like @, #, or %), you might need to URL-encode those characters, or CMD might interpret them incorrectly. For example:
@ should be encoded as %40.
# should be encoded as %23.
% should be encoded as %25.

example with URL-Encoding:
snowfakery lodging_options.yml --output-format db --db-url postgresql://myuser:my%40password@localhost:5432/mydatabase


Explanation:
lodging_options.yml: The YAML file containing your Snowfakery recipe.
--output-format db: Specifies that the output should be in a database format.
--db-url: This flag is used to specify the connection string for the PostgreSQL database.
	username: Your PostgreSQL username.
	password: Your PostgreSQL password.
	hostname: The hostname or IP address of your PostgreSQL server.
	port: The port on which your PostgreSQL server is running (default is usually 5432).
	dbname: The name of the database where the data should be written.
Example Command:

Copy code
snowfakery lodging_options.yml --output-format db --db-url postgresql://myuser:mypassword@localhost:5432/mydatabase
This command would generate the data according to your Snowfakery YAML recipe and insert it directly into the specified PostgreSQL database.